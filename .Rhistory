demo()
library(ggplot2)
install.package(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
search()
find_rtools()
library(devtools)
.lipPaths()
.libPaths()
install.packages("kernsmooth")
install.packages("KernSmooth")
library(KernSmooth)
search()
search(KernSmooth)
search(2)
search()
?search
?ggplot2
??ggplot2
install.packages(devtools)
find.package("devtools")
install.packages("devtools")
library("devtools")
find_rtools()
library(shiny)
shiny::runApp('C:/Tools/RStudio/R/library/311_shiny')
quit()
installed_packages
quit()
installed_packages
installed_packages()
?rownames
quit()
?day
# Loading and preprocessing the data
setwd("~/GitHub/RepData_PeerAssessment1")
# Show any code that is needed to Load the data (i.e. read.csv())
# Process/transform the data (if necessary) into a format suitable for your
# analysis
act <- read.csv("activity.csv")
install.packages("plyr")
library(plyr)
library(lubridate)
act <- mutate(act, dts = ymd_hm(paste0(act$date," ",floor(act$interval / 100),":",act$interval %% 100)))
# What is mean total number of steps taken per day?
#
# For this part of the assignment, you can ignore the missing values in the
# dataset.
# Make a histogram of the total number of steps taken each day
# Calculate and report the mean and median total number of steps taken per day
dailySteps <- tapply(act$steps, act$date, sum)
dSteps2 <-ddply(act, .(date), summarize, sum = sum(steps))
hist(dailySteps)
mean
# What is the average daily activity pattern?
day <- ddply(act, .(interval), summarize, mean = mean(steps, na.rm = T))
day$time <- hm(paste0(floor(day$interval / 100),":",day$interval %% 100)))
#
# Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
# and the average number of steps taken, averaged across all days (y-axis)
#
# Which 5-minute interval, on average across all the days in the dataset,
# contains the maximum number of steps?
#
# Imputing missing values
#
# Note that there are a number of days/intervals where there are missing values
# (coded as NA). The presence of missing days may introduce bias into some
# calculations or summaries of the data.
#
# Calculate and report the total number of missing values in the dataset (i.e.
# the total number of rows with NAs)
#
# Devise a strategy for filling in all of the missing values in the dataset. The
# strategy does not need to be sophisticated. For example, you could use the
# mean/median for that day, or the mean for that 5-minute interval, etc.
#
# Create a new dataset that is equal to the original dataset but with the
# missing data filled in.
#
# Make a histogram of the total number of steps taken each day and Calculate and
# report the mean and median total number of steps taken per day. Do these
# values differ from the estimates from the first part of the assignment? What
# is the impact of imputing missing data on the estimates of the total daily
# number of steps?
#
# Are there differences in activity patterns between weekdays and weekends?
#
# For this part the weekdays() function may be of some help here. Use the
# dataset with the filled-in missing values for this part.
#
# Create a new factor variable in the dataset with two levels – “weekday” and
# “weekend” indicating whether a given date is a weekday or weekend day.
# Make a panel plot containing a time series plot (i.e. type = "l") of the
# 5-minute interval (x-axis) and the average number of steps taken, averaged
# across all weekday days or weekend days (y-axis). See the README file in the
# GitHub repository to see an example of what this plot should look like using
# simulated data.
day$time
str(day)
day$time <- hm(paste0(floor(day$interval / 100),":",day$interval %% 100)))
day$time <- hm(paste0(floor(day$interval / 100),":",day$interval %% 100))
day$time
as.factor(day$time)
str(day)
as.factor(day$time$hour)
plot(x = day$time$hour, y = day$mean)
day <- mutate(day, time2 = hm(paste0(floor(day$interval / 100),".",day$interval %% 100)/60))
day <- mutate(day, time2 = hm(paste0(floor(day$interval / 100),".",day$interval %% 100/60))
)
str(day)
day <- mutate(day, time2 = floor(day$interval / 100)+day$interval %% 100/60))
day <- mutate(day, time2 = floor(day$interval / 100)+day$interval %% 100/60)
str(day)
plot(x = day$time2, y = day$mean)
"this " + "that"
"this " & "that"
ggplot(aes(x=time, y=mean), data=day)+geom_line()
+ ggtitle(paste("Average steps per 5-min interval between", min(dts),
"and", max(dts))
)
library(ggplot2)
ggplot(aes(x=time, y=mean), data=day) + geom_line() +
ggtitle(paste("Average steps per 5-min interval between", min(dts),
"and", max(dts)))
str(act)
ggplot(aes(x=time, y=mean), data=day) + geom_line() +
ggtitle(paste("Average steps per 5-min interval between", min(act$dts),
"and", max(dts)))
str(act$dts)
min(act$dts)
max(act$dts)
ggplot(aes(x=time, y=mean), data=day) + geom_line() +
ggtitle(paste("Average steps per 5-min interval between", min(act$dts),
"and", max(act$dts)))
day <- mutate(day, time = paste0(floor(day$interval / 100)+day$interval %% 100/60)
)
ggplot(aes(x=time, y=mean), data=day) + geom_line() +
ggtitle(paste("Average steps per 5-min interval between", min(act$dts),
"and", max(act$dts)))
day$time
plot(day$time, day$mean)
ggplot(aes(x=time, y=mean), data=day) + geom_line()
ggplot(aes(x=time, y=mean), data=day) + geom_point()
plot(day$time, day$mean)
plot(day$time, day$mean,type="l",xlab="Time of Day", ylab="Ave Steps", main=paste("Average steps per 5-min interval between", min(act$dts),
"and", max(act$dts)))
ymd(max(act$dts))
plot(day$time, day$mean,type="l",xlab="Time of Day", ylab="Ave Steps",
main=paste("Average steps per 5-min interval between",
format(min(act$dts), "%b-%d-%y"), "and", format(max(act$dts), "%b-%d-%y")))
str(day)
day <- mutate(day, ldTime = hm(paste0(floor(day$interval / 100), ":",day$interval %% 100)))
day <- mutate(day, ldTime = hm(paste0(floor(day$interval / 100), ":",day$interval %% 100)))
str(day)
day <- ddply(act, .(interval), summarize, mean = mean(steps, na.rm = T))
day <- mutate(day, ldTime = hm(paste0(floor(day$interval / 100), ":",day$interval %% 100)))
day <- mutate(day, time = paste0(floor(day$interval / 100)+day$interval %% 100/60)
str(day)
max(str$mean)
max(day$mean)
which.max(day$mean)
day[which.max(day$mean),]
tail(daey)
tail(day)
paste(day$ldTime(maxInt),"and",day$ldTime(maxInt+1))
day$ldTime(maxInt)
class(day$ldTime(maxInt))
class(day$ldTime[maxInt])
maxInt <- which.max(day$mean)
maxInt <- which.max(day$mean)
class(day$ldTime[maxInt])
maxStepPeriod <- paste(day$ldTime[maxInt],"and",day$ldTime[maxInt+1])
?format
?lubridate
?round_date
format(day$ldTime[100], "%H:%M")
sum(is.na(day))
sum(is.na(day$mean))
sum(is.na(act))
is.na(act)
?is.na
sum(is.na(act$steps))
sum(is.na(act$date))
sum(is.na(act$interval))
head(act)
ACT <- act
?merge
ACT <-merge(act, day)
head(ACT)
head(ACT,30)
ACT <-merge(act, day, by.x="interval", by.y="interval")
head(ACT,30)
ACT$steps[is.na(ACT$steps)] <- ACT$mean[is.na(ACT$steps)]
head(ACT,30)
ACT <- subset(ACT, select=c("steps","date","interval"))
sum(is.na(ACT))
dailyStps <- tapply(ACT$steps, ACT$date, sum)
dailyStps
meanDailyStps <- mean(dailyStps)
hist(dailyStps)
stdDailySteps <- std(dailySteps, na.rm = T)
sdDailySteps <- sd(dailySteps, na.rm = T)
sdDailyStps <- sd(dailyStps)
medDailyStps <- median(dailyStps)
medDailySteps <- median(dailySteps, na.rm = T)
?weekday
?weekdays
weekdays(0)
weekdays()
weekdays(ACT$date)
ACT <-merge(act, day)
ACT$steps[is.na(ACT$steps)] <- ACT$mean[is.na(ACT$steps)]
weekdays(ACT$dts[1])
weekdays(ACT$dts[280])
weekdays(ACT$dts[380])
weekdays(ACT$dts[1:20])
ifelse(weekdays(ACT$dts[1])="Saturday","weekend")
ifelse(weekdays(ACT$dts[1])=="Saturday","weekend")
ifelse(weekdays(ACT$dts[1])=="Saturday","weekend","weekday")
ifelse(weekdays(ACT$dts[5])=="Saturday","weekend","weekday")
ACT$day <- ifelse(weekdays(ACT$dts)=="Saturday","weekend",
ifelse(weekdaysACT$dts=="Sunday", "weekend", "weekday"))
ACT$day <- ifelse(weekdays(ACT$dts)=="Saturday","weekend",
ifelse(weekdays(ACT$dts)=="Sunday", "weekend", "weekday"))
head(ACT)
str(ACT)
ACT$day <- as.factor(ifelse(weekdays(ACT$dts)=="Saturday","weekend",
ifelse(weekdays(ACT$dts)=="Sunday", "weekend", "weekday")))
ddply(act, .(interval, day), summarize, mean = mean(steps, na.rm = T))
ACTs <- ddply(ACT, .(day, interval), summarize, mean = mean(steps, na.rm = T))
head(ACTs)
ACTs <- mutate(ACTs, time = paste0(floor(day$interval / 100)+day$interval %% 100/60))
ACTs <- mutate(ACTs, time = paste0(floor(ACTs$interval / 100)+ACTs$interval %% 100/60))
ACTs
plot(x=ACTs$time[day="weekday"],y=ACTs$mean[day="weekday"])
ACTs$time[day="weekday"]
ggplot(ACTs$time, ACTs$mean)
ggplot(aes(x=time, y=mean), data=ACTs)+geom_point()
ggplot(aes(x=time, y=mean), data=ACTs)+geom_line()
ggplot(aes(x=time, y=mean), data=ACTs, facet=day)+geom_line()
ggplot(aes(x=time, y=mean), data=ACTs, facet~day)+geom_line()
ggplot(aes(x=time, y=mean), data=ACTs)+geom_line()+facet_grid(~day)
ggplot(aes(x=time, y=mean), data=ACTs)+geom_line(group=day)+facet_grid(~day)
ggplot(aes(x=time, y=mean), data=ACTs)+geom_line(aes(group=day)+facet_grid(~day)
ggplot(aes(x=time, y=mean), data=ACTs)+geom_line(aes(group=day)+facet_grid(~day)
ggplot(aes(x=time, y=mean), data=ACTs)+geom_line(aes(group=day))+facet_grid(~day)
ggplot(aes(x=time, y=mean), data=ACTs, nrow=2)+geom_line(aes(group=day))+facet_grid(~day)
ggplot(aes(x=time, y=mean), data=ACTs, ncol=2)+geom_line(aes(group=day))+facet_grid(~day)
ggplot(aes(x=time, y=mean), data=ACTs)+geom_line(aes(group=day))+facet_grid(~day)+facet_wrap(ncol=1)
ggplot(aes(x=time, y=mean), data=ACTs)+geom_line(aes(group=day))+facet_grid(~day)+facet_wrap(day,ncol=1)
ggplot(aes(x=time, y=mean), data=ACTs)+geom_line(aes(group=day))+facet_grid(~day)+facet_wrap(~day,ncol=1)
ggplot(aes(x=time, y=mean), data=ACTs)+geom_line(aes(group=day))+facet_wrap(~day,ncol=1)
